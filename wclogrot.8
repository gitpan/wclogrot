.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH WCLOGROT 1 "perl 5.004, patch 04" "16/Sep/98" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
wclogrot \- Rotate Log Files
.SH "SYNOPSIS"
wclogrot [options] /path/to/file
.SH "DESCRIPTION"
wclogrot was designed for use on the Wood County FreeNet,
<http://www.wcnet.org/>.
.PP
wclogrot is a utility to make the rotation and management of log files
easier. It was designed to be called from a cron job or some other
regularly scheduled process.
.PP
On many Unix systems, log files such as \f(CW/var/log/messages\fR will
accumulate until they are manually cleaned or rotated. A common
practice in rotating log files is to rename the current file from
\f(CWmessages\fR to \f(CWmessages.0\fR, and if \f(CWmessages.0\fR already exists, it
is renamed as \f(CWmessages.1\fR and so on.
.PP
wclogrot makes this process easier. One may simply invoke wclogrot
with some command-line options (see ``OPTIONS'\*(R' below) to customize
its behavior and the path to the log file which needs to be
rotated. wclogrot takes care of keeping the right number of old log
files on hand. It is able to send e-mail in the event of success and
failure (if so desired). It can also compress the logs to conserve
space using ``gzip'\*(R'.
.SH "OPTIONS"
wclogrot can take a combination of many command-line options. All
options begin with a double-dash (--). Some take mandatory parameters,
while others are simple flags to enable a certain option.
.PP
The available options are:
.PP
--mailto ``address'\*(R'
.PP
.Vb 4
\&  Send mail upon success or failure to the listed address. If rotation
\&  succeeds, the mail will contain a report of the old and new filename
\&  as well as the number of old log files that were removed (see the
\&  `keep' parameter). By default, all e-mail will go to root@localhost.
.Ve
--mail
.PP
.Vb 2
\&  Enable the sending of mail to the address listed in
\&  `mailto'. Mailing is disabled by default.
.Ve
--debug
.PP
.Vb 5
\&  Enable the output of debugging messages to STDOUT. This is really
\&  only useful for development or if you are trying to track down a
\&  problem. The debugging messages should give you a good idea of what
\&  is happening as wclogrot goes through its motions.  Debugging is
\&  disabled by default.
.Ve
--compress
.PP
.Vb 3
\&  Enable compression of the rotated log files. Currently, the only
\&  supported compression program is GNU Zip (gzip). Compressed files
\&  will end in a .gz suffix. Compression is disabled by default.
.Ve
--help
.PP
.Vb 2
\&  Display a brief help message to remind you of command-line
\&  arguments. This won't happen by default.
.Ve
--keep <number>
.PP
.Vb 7
\&  Tell wclogrot how many ``old'' log files you'd like to keep. This
\&  does not count the new log that will be created after rotation. If
\&  you specify ``--keep 3'' for rotating /var/log/messages, you will
\&  eventually end up with messages.0, messages.1, and
\&  messages.2. During each rotation, log files older that specified
\&  will be removed. File ``age'' is determined by the suffix, not the
\&  actual timestamp. The default value for keep is 1.
.Ve
--zipcmd \*(L"/path/to/zip/program \-and_options\*(R"
.PP
.Vb 4
\&  Specify and alternate program to be used for compression. This is
\&  reserved for future use and shouldn't be used in the current
\&  version, as it is somewhat hard-wired for ``gzip -9''. This
\&  restriction will vanish in a future version.
.Ve
.SH "BUGS"
There are no known bugs yet.
.PP
wclogrot makes fairly extensive attempts to trap most trappable
errors. In the event of a problem, it will send a failure notice via
e-mail (if enabled) and exit with a non-zero exit code.
.SH "AUTHOR AND COPYRIGHT"
Copyright 1998, Jeremy D. Zawodny <jzawodn@wcnet.org>
.PP
wclogrot may be used, copied, and re-distributed under the same terms as Perl.
.SH "VERSION"
$Revision: 1.3 $

.rn }` ''
.IX Title "WCLOGROT 1"
.IX Name "wclogrot - Rotate Log Files"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "OPTIONS"

.IX Header "BUGS"

.IX Header "AUTHOR AND COPYRIGHT"

.IX Header "VERSION"

